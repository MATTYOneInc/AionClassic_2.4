package com.aionemu.gameserver.model.stats.container;

import com.aionemu.gameserver.model.items.ItemSlot;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlType;

@XmlType(name = "StatEnum")
@XmlEnum
public enum StatEnum
{
	ALLRESIST(1),
	ALLPARA(2),
	STRVIT(3),
	KNOWIL(4),
	AGIDEX(5),
	POWER(6, true),
	HEALTH(7, true),
	ACCURACY(8, true),
	AGILITY(9, true),
	KNOWLEDGE(10, true),
	WILL(11, true),
	WATER_RESISTANCE(12),
	WIND_RESISTANCE(13),
	EARTH_RESISTANCE(14),
	FIRE_RESISTANCE(15),
	LIGHT_RESISTANCE(16),
	DARK_RESISTANCE(17),
	MAXHP(18),
	REGEN_HP(19),
	MAXMP(20),
	REGEN_MP(21),
	MAXDP(22),
	FLY_TIME(23),
	REGEN_FP(24),
	PHYSICAL_ATTACK(25),
	PHYSICAL_DEFENSE(26),
	MAGICAL_ATTACK(27),
	MAGICAL_RESIST(28),
	ATTACK_SPEED(29, -1, true),
	PHYSICAL_ACCURACY(30),
	EVASION(31),
	PARRY(32),
	BLOCK(33),
	PHYSICAL_CRITICAL(34),
	HIT_COUNT(35, true),
	SPEED(36, true),
	FLY_SPEED(37),
	ATTACK_RANGE(38, true),
	WEIGHT(39, true),
	MAGICAL_CRITICAL(40),
	CONCENTRATION(41),
	POISON_RESISTANCE(43),
	BLEED_RESISTANCE(44),
	PARALYZE_RESISTANCE(45),
	SLEEP_RESISTANCE(46),
	ROOT_RESISTANCE(47),
	BLIND_RESISTANCE(48),
	CHARM_RESISTANCE(49),
	DISEASE_RESISTANCE(50),
	SILENCE_RESISTANCE(51),
	FEAR_RESISTANCE(52),
	CURSE_RESISTANCE(53),
	CONFUSE_RESISTANCE(54),
	STUN_RESISTANCE(55),
	PETRIFICATION_RESISTANCE(56),
	STUMBLE_RESISTANCE(57),
	STAGGER_RESISTANCE(58),
	OPENAREIAL_RESISTANCE(59),
	SLOW_RESISTANCE(60),
	SNARE_RESISTANCE(61),
	SPIN_RESISTANCE(62),
	BIND_RESISTANCE(63),
	DEFORM_RESISTANCE(64),
	PULLED_RESISTANCE(65),
	NOFLY_RESISTANCE(66),
	SIMPLE_ROOT_RESISTANCE(67),
	ABNORMAL_RESISTANCE_ALL(68),
	POISON_RESISTANCE_PENETRATION(69),
	BLEED_RESISTANCE_PENETRATION(70),
	PARALYZE_RESISTANCE_PENETRATION(71),
	SLEEP_RESISTANCE_PENETRATION(72),
	ROOT_RESISTANCE_PENETRATION(73),
	BLIND_RESISTANCE_PENETRATION(74),
	CHARM_RESISTANCE_PENETRATION(75),
	DISEASE_RESISTANCE_PENETRATION(76),
	SILENCE_RESISTANCE_PENETRATION(77),
	FEAR_RESISTANCE_PENETRATION(78),
	CURSE_RESISTANCE_PENETRATION(79),
	CONFUSE_RESISTANCE_PENETRATION(80),
	STUN_RESISTANCE_PENETRATION(81),
	PETRIFICATION_RESISTANCE_PENETRATION(82),
	STUMBLE_RESISTANCE_PENETRATION(83),
	STAGGER_RESISTANCE_PENETRATION(84),
	OPENAREIAL_RESISTANCE_PENETRATION(85),
	SLOW_RESISTANCE_PENETRATION(86),
	SNARE_RESISTANCE_PENETRATION(87),
	SPIN_RESISTANCE_PENETRATION(88),
	BIND_RESISTANCE_PENETRATION(89),
	DEFORM_RESISTANCE_PENETRATION(90),
	PULLED_RESISTANCE_PENETRATION(91),
	SIMPLE_ROOT_RESISTANCE_PENETRATION(92),
	NOFLY_RESISTANCE_PENETRATION(93),
	RESISTANCE_PENETRATION_ALL(94),
	STUNLIKE_RESISTANCE(95),
	ALLSPEED(103),
	BOOST_MAGICAL_SKILL(104),
	MAGICAL_ACCURACY(105),
	PVP_ATTACK_RATIO(106),
	PVP_DEFEND_RATIO(107),
	BOOST_CASTING_TIME(108),
	BOOST_HATE(109),
	HEAL_BOOST(110),
	PVP_ATTACK_RATIO_MAGICAL(111),
	PVP_DEFEND_RATIO_PHYSICAL(112),
	PVP_ATTACK_RATIO_PHYSICAL(113),
	PVP_DEFEND_RATIO_MAGICAL(114),
	MAGICAL_CRITICAL_RESIST(116),
	PHYSICAL_CRITICAL_RESIST(115),
	PHYSICAL_CRITICAL_DAMAGE_REDUCE(117),
	MAGICAL_CRITICAL_DAMAGE_REDUCE(118),
	PVE_ATTACK_RATIO(119),
	PVE_DEFEND_RATIO(120),
	PVE_ATTACK_RATIO_PHYSICAL(121),
	PVE_DEFEND_RATIO_PHYSICAL(122),
	PVE_ATTACK_RATIO_MAGICAL(123),
	PVE_DEFEND_RATIO_MAGICAL(124),
	MAGICAL_DEFEND(125),
	MAGIC_SKILL_BOOST_RESIST(126),
	BOOST_CHARGE_TIME(129),
	PROC_REDUCE_RATE(136),
	HIDDEN_PROC_REDUCE_RATE(137),
	BLOCK_PENETRATION(150),
	HIDDEN_BLOCK_PENETRATION(151),
	HEAL_SKILL_BOOST(152),
	MAIN_HAND_HITS,
	MAIN_HAND_ACCURACY,
	MAIN_HAND_CRITICAL,
	MAIN_HAND_POWER,
	MAIN_HAND_ATTACK_SPEED,
	OFF_HAND_HITS,
	OFF_HAND_ACCURACY,
	OFF_HAND_CRITICAL,
	OFF_HAND_POWER,
	OFF_HAND_ATTACK_SPEED,
	MAIN_HAND_MAGICAL_ATTACK,
	OFF_HAND_MAGICAL_ATTACK,
	MAIN_HAND_MAGICAL_ACCURACY,
	OFF_HAND_MAGICAL_ACCURACY,
	MAIN_HAND_MAGICAL_POWER,
	MAIN_HAND_MAGICAL_CRITICAL,
	OFF_HAND_MAGICAL_POWER,
	OFF_HAND_MAGICAL_CRITICAL,
	MAX_DAMAGES,
	MIN_DAMAGES,
	IS_MAGICAL_ATTACK(0, true),
	BOOST_SPELL_ATTACK,
	BOOST_CASTING_TIME_HEAL,
	BOOST_CASTING_TIME_TRAP,
	BOOST_CASTING_TIME_ATTACK,
	BOOST_CASTING_TIME_SKILL,
	BOOST_CASTING_TIME_SUMMONHOMING,
	BOOST_CASTING_TIME_SUMMON,
	DAMAGE_REDUCE,
	DAMAGE_REDUCE_MAX,
	HEAL_SKILL_DEBOOST,
	ELEMENTAL_RESISTANCE_DARK,
	ELEMENTAL_RESISTANCE_LIGHT,
	ERFIRE,
	ERAIR,
	EREARTH,
	ERWATER,
	BOOST_HUNTING_XP_RATE,
	BOOST_GROUP_HUNTING_XP_RATE,
	BOOST_BOOK_XP_RATE,
	BOOST_QUEST_XP_RATE,
	BOOST_CRAFTING_XP_RATE,
	BOOST_COOKING_XP_RATE,
	BOOST_WEAPONSMITHING_XP_RATE,
	BOOST_ARMORSMITHING_XP_RATE,
	BOOST_TAILORING_XP_RATE,
	BOOST_ALCHEMY_XP_RATE,
	BOOST_HANDICRAFTING_XP_RATE,
	BOOST_MENUISIER_XP_RATE,
	BOOST_GATHERING_XP_RATE,
	BOOST_AETHERTAPPING_XP_RATE,
	BOOST_ESSENCETAPPING_XP_RATE,
	BOOST_DROP_RATE,
	BOOST_KINAH_RATE,
	BOOST_MANTRA_RANGE,
	BOOST_DURATION_BUFF,
	BOOST_RESIST_DEBUFF,
	ELEMENTAL_FIRE,
	PVP_PHYSICAL_ATTACK,
	PVP_PHYSICAL_DEFEND,
	PVP_MAGICAL_ATTACK,
	PVP_MAGICAL_DEFEND,
	AP_BOOST,
	DR_BOOST,
	PHYSICAL_DAMAGE,
	MAGICAL_DAMAGE,
	PHYSICAL_CRITICAL_REDUCE_RATE,
	MAGICAL_CRITICAL_REDUCE_RATE,
	PVP_DODGE,
	PVP_BLOCK,
	PVP_PARRY,
	PVP_HIT_ACCURACY,
	PVP_MAGICAL_RESIST,
	PVP_MAGICAL_HIT_ACCURACY,
	ENCHANT_BOOST,
	AP_REDUCE_RATE,
	AUTHORIZE_BOOST,
	INDUN_DROP_BOOST,
	DEATH_PENALTY_REDUCE,
	ENCHANT_OPTION_BOOST,
	GATHER_SUCCESS,
	GATHER_DOUBLE,
	GATHER_SPEED;
	
	private boolean replace;
	private int sign;
	
	private int itemStoneMask;
	
	private StatEnum() {
		this(0);
	}
	
	private StatEnum(int stoneMask) {
		this(stoneMask, 1, false);
	}
	
	private StatEnum(int stoneMask, boolean replace) {
		this(stoneMask, 1, replace);
	}
	
	private StatEnum(int stoneMask, int sign) {
		this(stoneMask, sign, false);
	}
	
	private StatEnum(int stoneMask, int sign, boolean replace) {
		this.itemStoneMask = stoneMask;
		this.replace = replace;
		this.sign = sign;
	}
	
	public int getSign() {
		return sign;
	}
	
	public int getItemStoneMask() {
		return itemStoneMask;
	}
	
	public static StatEnum findByItemStoneMask(int mask) {
		for (StatEnum sEnum : values()) {
			if (sEnum.getItemStoneMask() == mask) {
				return sEnum;
			}
		}
		throw new IllegalArgumentException("Cannot find StatEnum for stone mask: " + mask);
	}
	
	public StatEnum getHandStat(long itemSlot) {
		switch (this) {
			case MAGICAL_ATTACK:
				return itemSlot == ItemSlot.MAIN_HAND.getSlotIdMask() ? MAIN_HAND_MAGICAL_ATTACK : OFF_HAND_MAGICAL_ATTACK;
			case MAGICAL_ACCURACY:
				return itemSlot == ItemSlot.MAIN_HAND.getSlotIdMask() ? MAIN_HAND_MAGICAL_ACCURACY : OFF_HAND_MAGICAL_ACCURACY;
			case PHYSICAL_ATTACK:
				return itemSlot == ItemSlot.MAIN_HAND.getSlotIdMask() ? MAIN_HAND_POWER : OFF_HAND_POWER;
			case PHYSICAL_ACCURACY:
				return itemSlot == ItemSlot.MAIN_HAND.getSlotIdMask() ? MAIN_HAND_ACCURACY : OFF_HAND_ACCURACY;
			case PHYSICAL_CRITICAL:
				return itemSlot == ItemSlot.MAIN_HAND.getSlotIdMask() ? MAIN_HAND_CRITICAL : OFF_HAND_CRITICAL;
			default:
				return this;
		}
	}
	
	public boolean isMainOrSubHandStat() {
		switch (this) {
		case MAGICAL_ATTACK:
		case MAGICAL_ACCURACY:
		case PHYSICAL_ATTACK:
		case POWER:
		case PHYSICAL_ACCURACY:
		case PHYSICAL_CRITICAL:
			return true;
		default:
			return false;
		}
	}
	
	public boolean isReplace() {
		return replace;
	}
	
	public static StatEnum getModifier(int skillId) {
		switch (skillId) {
		case 30001:
		case 30002:
			return BOOST_ESSENCETAPPING_XP_RATE;
		case 30003:
			return BOOST_AETHERTAPPING_XP_RATE;
		case 40001:
			return BOOST_COOKING_XP_RATE;
		case 40002:
			return BOOST_WEAPONSMITHING_XP_RATE;
		case 40003:
			return BOOST_ARMORSMITHING_XP_RATE;
		case 40004:
			return BOOST_TAILORING_XP_RATE;
		case 40007:
			return BOOST_ALCHEMY_XP_RATE;
		case 40008:
			return BOOST_HANDICRAFTING_XP_RATE;
		default:
			return null;
		}
	}
}